[
{
	"uri": "https://Kaka1127.github.io/guide/developer/children-1/",
	"title": "Rancherの使い方",
	"tags": [],
	"description": "",
	"content": "Rancherの用途 Rancherは主に以下の用途で利用します。\n カタログを使った開発環境の立ち上げ/立ち下げ 立ち上げた環境へのアクセス  リンク\n Rancher: http://10.xxx.xxx.xxx:9080   ログイン画面  ログイン方法 ログイン画面からユーザー名・パスワードを入力します。\nユーザー名・パスワードはシステム管理者から提供されますので、不明な場合はシステム管理者に確認してください。\n  ログイン直後のトップ画面    番号 説明     ① 管理しているクラスターの一覧です。複数のクラスターがあれば複数表示されます。    クラスターとは\n複数台のPCやサーバーをネットワークで接続し、ひとつのコンピュータに見立てて利用できるようにしたシステムです。\nカタログから環境立ち上げを依頼するとクラスター下にあるPCやサーバーの使用状況を見て、環境立ち上げを自動的に行ってくれます。\n  カタログを使った開発環境の起動  プロジェクトへの移動 Harborの認証情報登録 カタログを使ったアプリの起動 立ち上げた環境へのアクセス  アプリ起動する際に既存の設定をコピーするクローン機能がありますが、クローンを使うとアプリ画面から削除してもコンテナが消えない現象が発生します。\nもし、クローンでアプリを作成した場合はアプリ画面から削除の上、ワークロードから直接削除する必要があります。\n  1. プロジェクトへの移動 左上の”グローバル”からアクセス可能なクラスターにある”プロジェクト”を選択します。\nプロジェクトとは\nチームや開発プロジェクト単位でメンバーを管理するための仕組みとして利用できます。\n特に会社全体でクラスターを利用するような場合においてはチーム間の秘匿性を保つための仕組みとしても利用できます。\n   プロジェクトトップ画面の説明    プロジェクトトップ画面    番号 説明     ① 稼働しているアプリケーション一覧が表示されます。   ② プロジェクトのトップベージが開かれます。稼働中の状態を確認するワークロードやHarborの認証情報（シークレット）登録を行う際に利用します。   ③ 開発するためのアプリケーションを起動するための画面に移動します。   ④ このプロジェクトにアクセスできるメンバーが表示されます。   ⑤ ワークロードおよびサービスディスカバリーのみこのシステムでは利用します。         2. シークレットの登録 Harobrからアプリケーションのイメージを入手するために、Harborの認証情報を登録します。\nHarborについてはこちらを参照してください。\n   「リソース」→ 「シークレット」で移動   「レジストリ」のタブを選択   右側にある「レジストリを追加」を選択   必要事項を記入して登録\n 名前：Harborと同じ名前を入力 スコープ：「このプロジェクトすべての名前空間で使用可能」を選択 カスタム：HarborのIPアドレスを入力 ユーザー名：Harborにログインする際のユーザ名 パスワード：Harborにログインする際のパスワード   Harbor以外のNGCやDockerHubのレジストリを使う場合も登録する必要があります。\n    3. カタログを使ったアプリの起動   Appのボタンを押す\n起動しているアプリケーションやアプリを起動するための画面が表示されます。\n  アプリ画面の説明    アプリ画面    番号 説明     ① 稼働しているアプリケーション一覧が表示されます。   ② アプリの起動ボタンです。   ③ ブラウザでアクセス可能なアプリケーションの場合、ポート番号が表示されます。          「起動」ボタンを押し、使用したいカタログを選択   カタログの中にある使い方を確認しながら、必要事項を設定   アプリのトップ画面で状況確認\nクラスターのリソースが空いていれば、アプリケーションが実行されます。\n作成したアプリを押すことで詳細情報が確認ができ、エラーなのかリソース待ちなのか確認できます。   エラーなのかリソース待ちなのか判断する方法    確認するための4ステップ  エラーが発生しているアプリを選択  ワークロードにあるコンテナを選択  ポッドにあるコンテナを選択  Eventsを開く    判断方法  リソース待ちの場合\n”0/2 nodes are available: 2 Insufficient nvidia.com/gpu.”という内容が表示されている。\n エラーの場合 上記以外は全てエラーです。  例            4.立ち上げた環境へのアクセス 立ち上げた環境にアクセスするための方法は２つあります。\n ターミナルでアクセス  UIが使える場合は表示されたポート番号からアプリにアクセス アプリ画面から\nアプリ詳細画面から    カタログを使った開発環境の削除 アプリのトップ画面から削除ボタンを押す\nワークロード画面からアプリの削除を行うとアプリケーション画面では残ったままになるため、行わないでください。\n "
},
{
	"uri": "https://Kaka1127.github.io/guide/basics/children-1/",
	"title": "はじめに",
	"tags": [],
	"description": "",
	"content": "システムで使われている技術 マクニカAI開発環境は、各開発者がブラウザ経由でAIを開発するためのアプリケーション環境を簡単に立ち上げることができます。\nこのシステムでは「コンテナ」と呼ばれる技術仮想化技術をベースとしております。\nコンテナは以下のような理由により機械学習の開発において親和性が高く、昨今注目を浴びている技術です。\n 面倒な環境構築が最低限になり、バージョン依存関係エラーが起きない 環境が揃ったDockerイメージが豊富  NVIDIAからもGPUに最適化されたイメージが提供されている（NGC）   開発した環境をチーム内で共有可能 環境を破壊することなく破棄、再起動ができることから、スクラップ＆ビルドが簡単  このシステムはコンテナを扱うための詳細な知識がなくても、カタログと呼ばれるテンプレートに必要事項を記入するだけで簡単にコンテナ（アプリケーション）を起動することができますが、開発者がDockerの初歩の知識を持っていることが望ましいです。\nDockerが初めての方はリンク先を参照してください。\n Dockerとはなにか コンテナとはなにか Docker公式チュートリアル  "
},
{
	"uri": "https://Kaka1127.github.io/guide/basics/",
	"title": "基本",
	"tags": [],
	"description": "",
	"content": "Chapter 1 基本編  はじめに   用語   システム概要   ワークフロー   "
},
{
	"uri": "https://Kaka1127.github.io/guide/developer/children-2/",
	"title": "Harobrの使い方",
	"tags": [],
	"description": "",
	"content": "Harborの用途 Haborは主に以下の用途で利用します。\n Dockerイメージの管理 Rancherで環境を立ち上げる時にイメージを取得する先として利用する チームまたは自分専用のレジストリが持てる  リンク\n Harbor: http://10.xxx.xxx.xxx   ログイン画面  トップ画面    番号 説明     ① 権限のあるプロジェクトの一覧を確認できます。”library”は社内共通イメージが存在します。   ② ユーザー名が表示されます。ここを押すとパスワード変更、ログアウトすることができます。   ③ Harbor上で行ったイベント（削除、プロジェクト追加など）が表示されます。   ④ ログインしたユーザの権限で確認できるレポジトリ情報が表示されます。   ⑤ ログインしたユーザの権限で確認できるイベントのログ情報が確認できます。   ⑥ 新しくプロジェクトを作成、削除するためのボタンです。     ログイン方法 ログイン画面からユーザー名・パスワードを入力します。\nユーザー名・パスワードはシステム管理者から提供されますので、不明な場合はシステム管理者に確認してください。\n  チーム/自分専用のレジストリ作成   専用レジストリの作成\n トップ画面の”New PROJECT”ボタンを押す ”ProjectName”をつける Access Levelを“Public”にするとログインできるユーザ全てに公開されます。\n  トップ画面で確認     チームで共有のプロジェクトでユーザ追加する場合\n プロジェクトにある“Members”から“＋USER”を押す  ”Name”から登録されているユーザを選択し、権限を付与  Admin：メンバー管理、プロジェクトの設定などの権限を持つ Master：イメージの削除など“Developer”以上の権限を持つ Developer：プロジェクトの読み取り権限と書き込み権限 Guest：プロジェクトの読み取り専用の権限 権限に関する詳細はこちらを参照してください。\n    参加メンバーの確認     以降は主にワークステーションを使った開発者向けに説明を行います。\n  イメージの取得/保存方法 イメージの保存、取得には予めDockerコマンドでログインしておきます。\n$ sudo docker login 10.xxx.xxx.xxx  ・DockerコマンドでHarborにログインするにはdockerのDaemonに対して事前にセットアップする必要があります。\n・詳細はワークステーション向け初期設定を確認ください。\n   取得方法 Docker Pullコマンドでイメージを取得\n$ sudo docker pull 10.xxx.xxx.xxx/library/tensorflow:20.02-tf2-py3  権限のないプロジェクトからイメージを取得することはできません。\n   保存方法 Docker Pushコマンドでイメージを取得\n$ sudo docker push 10.xxx.xxx.xxx/kato/test:1.0  ・権限のないプロジェクトへの保存はできません。\n・Publicではないプロエジェクトにイメージを保存する場合は予めプロジェクトを作成しておく必要があります。\n・イメージ名の変更方法に関してはワークステーション向け初期設定を確認ください。\n   "
},
{
	"uri": "https://Kaka1127.github.io/guide/basics/children-2/",
	"title": "用語",
	"tags": [],
	"description": "",
	"content": "本システムで使われる用語 ユーザーガイドで使用される用語をまとめています。\n   用語 説明     Docker コンテナ仮想化技術の１つで、2020年現在ではコンテナ仮想化技術の業界標準になっています。   Dockerイメージ イメージはコンテナの基になるデータで、OSやライブラリなどを含むファイル群が含まれています。   Docker Hub ユーザーが作成したコンテナをアップロードして公開・共有できるサービスで、ここで公開されているコンテナは自由にダウンロードして自分のサーバーに簡単にデプロイできます。   レジストリ コンテナイメージを管理、保存するための場所です。一般にはDocker Hub、NGC（NVIDIA GPU Could）など公開されているレジストリがあります。このシステムでは社内専用イメージが格納されたプライベートレジストリ「Harbor」が使えます。   NGC NVIDIA GPU CLOUDの略です。NVIDIAで検証されたコンテナイメージや学習済みのモデルなどが無償で配布されています。入手にはユーザー登録が必要です。   Rancher コンテナ管理のプラットフォームを提供するアプリケーションです。Rancherのカタログ機能を使用してHarborやNGCにあるイメージを使った開発環境（コンテナ）の立ち上げを行います。   カタログ コンテナを起動するためのテンプレートでRancherで使用します。穴埋め式で必要事項を記入するとコンテナが起動できます。   Harbor Docker Hubのような、コンテナイメージを保存し公開する機能を実装したソフトウェアです。   Portainer Dockerの操作をGUIで行うことができます。   Grafana 情報収集/監視ツールと組み合せで使用する可視化することができるツールです。   Kubernetes クラスタのリソース管理、配分、スケジューリング等の基本的な機能を提供するコンテナオーケストレーションを行います。   Gitlab ソフトウェア開発支援環境で、「GitHub」のようなサービスを社内などのクローズド環境に独自で構築できるGitリポジトリマネージャーです。    "
},
{
	"uri": "https://Kaka1127.github.io/guide/developer/",
	"title": "開発者",
	"tags": [],
	"description": "",
	"content": "Chapter 2 開発者向けガイド 開発者がシステムを利用するために必要な項目を記載しています。\n以下のチャートを参考に読むべきページを確認ください。\ngraph TD; A(開発スタート) -- B{パソコンのOS} B -- |Windows| C[1.Rancherの使い方] B -- |Ubuntu| D[1.ワークステーション向け初期設定] C -- E[2.Harborの使い方] D -- F[2.Harborの使い方] F -- G[3.Rancherの使い方] E -- H[3.Portainerの使い方] H -- J[4.Grafanaの使い方] G -- L[4.Grafanaの使い方] J -- K[5.チュートリアル]   Rancherの使い方   Harobrの使い方   Portainerの使い方   Grafanaの使い方   ワークステーション向け初期設定   チュートリアル   "
},
{
	"uri": "https://Kaka1127.github.io/guide/admin/",
	"title": "管理者向け",
	"tags": [],
	"description": "",
	"content": "Chapter 3 Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://Kaka1127.github.io/guide/developer/children-3/",
	"title": "Portainerの使い方",
	"tags": [],
	"description": "",
	"content": "Portainerの用途 Portainerは主に以下の用途で利用します。\n Harborに保存するためのイメージ名変更 Harborへのイメージ保存  リンク\n Portainer: http://10.xxx.xxx.xxx:9000   ログイン画面  トップ画面    番号 説明     ① メニュー画面です。   ② コンテナを管理している対象が一覧で表示されます。”local”は実行されている環境を意味します。   ③ ユーザー名が表示されます。パスワード変更、ログアウトすることができます。     ダッシュボード 管理する対象を選択すると稼働状況が確認できますが、使用するのは“Containers”と“Images”のみです。\n ログイン方法 ログイン画面からユーザー名・パスワードを入力します。\nユーザー名・パスワードはシステム管理者から提供されますので、不明な場合はシステム管理者に確認してください。\n  初期設定 Harborに保存するためにHarborへのアクセス権限を登録します\n 左側のメニューから“Registries”を選択 “Add registry”を押す  \u0026ldquo;Custom Registry\u0026quot;を選択の上、必要事項を記入  Name: ログインIDと同じ名前 Registry URL：HarborのIPアドレス Userneme：HarborにログインするID Password：ログインIDのパスワード    保存   立ち上げたコンテナの保存 Rancherのカタログで立ち上げた環境で開発が完了したコンテナを保存します。\n  ダッシュボードトップまたは左メニューの“Containers”を選択\n  表示された稼働中のコンテナ一覧から保存したいコンテナを選択   “Create Image”の“Registry”で自分のIDを選択し、Imageに名前をつける 保存先になるHarborのプロジェクトは先に作成しておく必要があります。 アクセス権限のないHarborのプロジェクトには保存できません。\n   ダッシュボードトップまたは左メニューの“Images”を選択\n  作成したイメージを選択 ”Created”でソートするとイメージを見つけやすいです。\n   Pushのボタンを押してイメージを保存   "
},
{
	"uri": "https://Kaka1127.github.io/guide/basics/children-3/",
	"title": "システム概要",
	"tags": [],
	"description": "",
	"content": "AI開発において、本システムがカバーする範囲 データ前処理から性能テストまで、それぞれの開発環境が立ち上げ可能\n 環境構成 本システムで構成されている要素は下記の通りです。\n   構成要素 説明     管理サーバ システム全体に関連した情報を取り扱うためのサーバー。   計算ノード 指示されたジョブを実行するサーバー。   開発者 ブラウザ経由で管理サーバに環境立ち上げ指示を行います。   共有ストレージ 学習に使用するデータを置くストレージ。学習結果もここに出力させる必要があります。     開発環境を立ち上げるまでの流れ   Rancherにログイン\n  カタログに必要事項を記入\n  立ち上がった環境にアクセスして開発\n  "
},
{
	"uri": "https://Kaka1127.github.io/guide/developer/children-4/",
	"title": "Grafanaの使い方",
	"tags": [],
	"description": "",
	"content": "Grafanaの用途 Grafanaは主に以下の用途で利用します。\n GPUの稼働状況確認  リンク\n Grafana: http://10.xxx.xxx.xxx:30300   ログイン画面  トップ画面  ログイン方法 ログイン画面からユーザー名・パスワードを入力します。\nユーザー名・パスワードはシステム管理者から提供されますので、不明な場合はシステム管理者に確認してください。\n  GPUの稼働状況確認   左上にある”Home”より”General”にある”GPU”を選択   GPUの情報が集約されたダッシュボードが表示   "
},
{
	"uri": "https://Kaka1127.github.io/guide/basics/children-4/",
	"title": "ワークフロー",
	"tags": [],
	"description": "",
	"content": "開発者ワークフロー システムを使うにあたり、Windowsのパソコンを使う場合とUbuntuのワークステーション向けに２つのワークフローがあります。\n  Windowsパソコンで開発を行う場合\n ブラウザでRancherにアクセス カタログから環境の立ち上げ ブラウザでモデル開発環境にアクセス 開発した環境の保存（必要あれば）    ワークステーションを使用した開発を行う場合\n 社内レジストリからイメージを入手 入手したイメージでモデルを開発 開発したコンテナを社内レジストリに保存 ブラウザでRancherにアクセス 作成したイメージを使用した計算ジョブをカタログから投入    具体的な使い方は詳細は管理者向けページで説明します。\n"
},
{
	"uri": "https://Kaka1127.github.io/guide/",
	"title": "AI開発環境",
	"tags": [],
	"description": "",
	"content": "AI開発統合環境ユーザガイド ユーザガイドの目的 このユーザガイドでは本開発環境を利用したAI開発をスムーズに行う為に各機能や手順を説明する事を目的としています。\n基本編 開発者向けガイド 管理者向けガイド "
},
{
	"uri": "https://Kaka1127.github.io/guide/developer/children-5/",
	"title": "ワークステーション向け初期設定",
	"tags": [],
	"description": "",
	"content": "dockerへの初期設定   TLS通信をしないアドレスを追加\n “/etc/docker/daemon.json”を編集  { \u0026quot;insecure-registries\u0026quot;: [\u0026quot;10.xxx.xxx.xxx\u0026quot;] }  ・ファイルが存在しない場合は作成ください。\n 2. dockerの再起動\n$ sudo service docker restart   Dockerログインコマンド\n使用するワークステーションで以下のコマンドを実行\n$ sudo docker login 10.xxx.xxx.xxx    Dockerイメージの名前付け Harborにイメージを保存するに当たって以下の規則にしたがってイメージに名前をつけます。\nイメージの名前規則：\u0026lt;IP\u0026gt;/\u0026lt;Harborのプロジェクト\u0026gt;/\u0026lt;管理する名前\u0026gt;:\u0026lt;タグ名\u0026gt;\n例：10.xxx.xxx.xxx/kato/test:1.0\n イメージの名前をつける方法   docker tagコマンドを使用して、イメージ名を変更\ndocker tag \u0026lt;コンテナ名/ID\u0026gt; \u0026lt;イメージ名\u0026gt;:\u0026lt;タグ名\u0026gt;   実行中のコンテナをdocker commitコマンドで保存\ndocker commit \u0026lt;コンテナ名/ID\u0026gt; \u0026lt;イメージ名\u0026gt;:\u0026lt;タグ名\u0026gt;   Dockerfileのビルド時に名前をつけてイメージを生成\ndocker build -t \u0026lt;イメージ名\u0026gt;:\u0026lt;タグ名\u0026gt; .     ・権限のないプロジェクトへの保存はできません。\n・Publicではないプロエジェクトにイメージを保存する場合は予めプロジェクトを作成しておく必要があります。\n・イメージ名の変更方法に関してはワークステーション向け初期設定を確認ください。\n "
},
{
	"uri": "https://Kaka1127.github.io/guide/developer/children-6/",
	"title": "チュートリアル",
	"tags": [],
	"description": "",
	"content": "Cifar10を使ったチュートリアル はじめに 本チュートリアルでは、学習環境を使用する方法について簡単に説明します。\n具体的には機械学習手法を試す際によく用いられるcifar-10の画像分類モデルを学習させる方法を以下の手順に沿って説明します。\n データをアップロードする データセットを作成する 学習を実行する TensorBoardで学習の状況を表示する 学習のログを確認する  "
},
{
	"uri": "https://Kaka1127.github.io/guide/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://Kaka1127.github.io/guide/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]